#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#define MAX_BLOCKS 100
bool bitVector[MAX_BLOCKS] = {false};
int directory[MAX_BLOCKS] = {0};
int numBlocks;
void showBitVector();
void createNewFile();
void showDirectory();
int main() {
srand(time(NULL));
printf("Enter the number of blocks in the disk: ");
scanf("%d", &numBlocks);
char choice;
do {
printf("\nLinked File Allocation Menu:\n");
printf("a) Show Bit Vector\n");
printf("b) Create New File\n");
printf("c) Show Directory\n");
printf("d) Exit\n");
printf("Enter your choice: ");
scanf(" %c", &choice);
switch (choice) {
case 'a':
showBitVector();
break;
case 'b':
createNewFile();
break;
case 'c':
showDirectory();
break;
case 'd':
printf("Exiting...\n");
break;
default:
printf("Invalid choice. Please try again.\n");
}
} while (choice != 'd');
return 0;
}
void showBitVector() {
printf("Bit Vector (Free = 0, Allocated = 1):\n");
for (int i = 0; i < numBlocks; i++) {
printf("%d ", bitVector[i] ? 1 : 0);
}
printf("\n");
}
void createNewFile() {
int startingBlock, fileSize;
printf("Enter starting block for the new file: ");
scanf("%d", &startingBlock);
printf("Enter file size: ");
scanf("%d", &fileSize);
bool canAllocate = true;
for (int i = startingBlock; i < startingBlock + fileSize; i++) {
if (bitVector[i] == true) {
canAllocate = false;
break;
}
}
if (canAllocate) {
for (int i = startingBlock; i < startingBlock + fileSize; i++) {
bitVector[i] = true;
directory[i] = startingBlock;
}
printf("File created successfully.\n");
} else {
printf("Error: Unable to create file. Some blocks are already allocated.\n");
}
}
void showDirectory() {
printf("Directory:\n");
for (int i = 0; i < numBlocks; i++) {
if (directory[i] != 0) {
printf("Block %d -> File starts at block %d\n", i, directory[i]);
}
}
}

2

#include <stdio.h>
#include <stdlib.h>
#define MAX_REQUESTS 100
void cscan(int requests[], int num_requests, int start_position, int num_blocks, int direction);
int main() {
int requests[MAX_REQUESTS];
int num_requests, start_position, num_blocks, direction;
printf("Enter the total number of disk blocks: ");
scanf("%d", &num_blocks);
printf("Enter the number of disk requests: ");
scanf("%d", &num_requests);
printf("Enter the disk request string: ");
for (int i = 0; i < num_requests; i++) {
scanf("%d", &requests[i]);
}
printf("Enter the starting head position: ");
scanf("%d", &start_position);
printf("Enter the direction (0 for Left, 1 for Right): ");
scanf("%d", &direction);
cscan(requests, num_requests, start_position, num_blocks, direction);
return 0;
}
void cscan(int requests[], int num_requests, int start_position, int num_blocks, int direction) {
int total_head_movements = 0;
int current_position = start_position;
int head_movements[num_requests];
int num_head_movements = 0;
for (int i = 0; i < num_requests - 1; i++) {
for (int j = 0; j < num_requests - i - 1; j++) {
if (requests[j] > requests[j + 1]) {
int temp = requests[j];
requests[j] = requests[j + 1];
requests[j + 1] = temp;
}
}
}
int start_index = 0;
while (start_index < num_requests && requests[start_index] < current_position) {
start_index++;
}
for (int i = start_index; i < num_requests; i++) {
if (requests[i] >= num_blocks) {
break;
}
head_movements[num_head_movements++] = abs(current_position - requests[i]);
total_head_movements += abs(current_position - requests[i]);
current_position = requests[i];
}
if (direction == 1) {
head_movements[num_head_movements++] = abs(current_position - num_blocks);
total_head_movements += abs(current_position - num_blocks);
current_position = 0;
}
for (int i = 0; i < start_index; i++) {
head_movements[num_head_movements++] = abs(current_position - requests[i]);
total_head_movements += abs(current_position - requests[i]);
current_position = requests[i];
}
printf("Order of requests served: ");
for (int i = 0; i < num_requests; i++) {
printf("%d ", requests[i]);
}
printf("\n");
printf("Total number of head movements: %d\n", total_head_movements);
}
